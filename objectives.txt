Current to-do's, roughly in order of priority:
	* In what format would Alex like the times to be displayed?
		For now, I will assume I can do HH:mm:ss,
		although that will make plots quite difficult to read,
		because it is so long
	* We need to switch the way we gather data,
		but I still have no idea what Alex is saying
	* If you're looking for graphs at around midnight,
		our current wiping implementation may
		make things complicated. Unfortunately, all
		of the work-arounds that I can think of are
		pretty limited.
			Keep an old table for the immediate previous day?
				Well what if someone wants to look at the
					week?
	* We need to redo the GUI grid layout.
		1. The buttons look terrible. I think that they
			should run along the bottom instead of
			the side.
		2. We need to fix alignment issues.
			When the visual length of the wind
			direction average changes, the entire
			text box moves around and that is completely
			unacceptable.
		3. The title is way too large and the text
			should probably be thicker.
		4. The graphs page in particular is an absolute failure
	* Can we figure out how to get the GUI to automatically
		re-size to fill the screen? This will be necessary
		since the Pi already has an incredibly tiny touch screen.
			* Additionally, maybe we can take a look at
				hiding the Pi's task bar and the GUI's
				menu bar? Diminishing returns;
				we'll have to play around and see whether
				it's worth it.
	* I find the white background to be an incredible eye sore.
		However, Alex may actually prefer the black and
		the white because it is sharper in all light conditions.
	* I consider the code to be fairly simple and intuitive.
		Nonetheless, it is always good practice to thoroughly
		document code. I think that I have good line comments
		throughout my code, but I have almost no docstrings.
		We should write some.

CSV interface idea:
* We should have a hard-coded "vertical padding" dictionary
	for our graphs. Depending on what we consider reasonable
	for each quantity, the y axis will run a bit long in each
	direction. Here is an example demonstrating the necessity:
		When we first turn on the monitor and look at
		the temperatures, there may be change
		by just a tenth of a degree. This creates an odd
		plummet graph with neither the before nor after
		being clear.
* Alex wants the program to run as  soon as the Pi is turned on
* When the program boots, it should check
	whether it is rebooting from a crash
	* How does the program know this?
		There will be a special file called log.txt
		If there is a graceful shutdown note, we're fine.
		Whether or not there is a graceful shutdown note,
		we wipe the file. That is how we know that we're
		not being misled by an old graceful shutdown note.
(depending on
	how long the Pi was knocked out, it either looks
	for a day-file to continue, or it starts a new one)

* Since we want to write to and read from a CSV file, we should
	mantain an internal pandas table that tracks all variable values.
	Then we can pick an arbitrary interval (make sure it links
	to an ALL_CAPS constant listed clearly at the top)
	and, at the end of every interval, update the day's CSV
	and update the log.txt with the most recent successful save.




The goal is to program a weather station readout with
easy touch-screen access

Don't forget to revert from Dvorak to QWERTY once you are done programming.

Also before we pass the torch, we should ask Alex how to handle
the under-volting. It could slowly damage the SD card over time.

Next steps:
	I. Split the output into pages:
		1. Weather station 1
		2. Weather station 2
		3. Differences
		4. Graphs
			This seems tough. There's not a whole lot
			of screen space but there are A LOT of graphs
			that I want to do (multiplied by three since
			we have counterpart graphs across all three pages)

Things I'm thinking about:
* How do I want to represent wind direction?
	Maybe we can have a vector arrow spinning around,
	then we have a separate graph for the intensities

Things I'm asking about:
* How long of a running average does Alex want for the plots?
	The readouts are already aggregations. It might be kind of
	strange or even misleading to aggregate aggregates.
* Until I ask this question, it might be best to give the user
    some options, like 5, 10, 50, 100

Things I could try to research for myself (documentation) or I could ask:
* How does the weather station give minima, maxima, and averages?
	I mean, what are the intervals over which those aggregations are
	given?

Based on some preliminary research, it seems like Tkinter is the
go-to library for Python GUI programming. But I will have something
of a learning curve, of course.

Things I know I need to do:
* Make the buttons much larger. Remember that any user interaction
	is going to be through that 3.5" touch screen.
* The program should automatically dump variable values into a CSV file
* Then we can keep logs for the weather of each day.		
